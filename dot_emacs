;;;
;;;
;;;


;;
;; http://tromey.com/elpa/install.html
;; Emacs Lisp PAckage Archive
;; Run the command M-x package-list-packages.


(setq load-path (append '("~/.emacs.d") load-path))

;; my email setting / exmac gnus
(load "~/.emacs.gnus")


;;no menu bar
(menu-bar-mode 0)

;;I always run a shell in Emacs. Always always.
(shell)

;;'side line number'
(require 'linum)
(global-linum-mode)

(setq line-number-mode t) 
(setq column-number-mode t)

;;highlight line number
;;(hl-line-mode 1)
(global-hl-line-mode 1)
(set-face-background 'hl-line "#CCCCCC")  ;; Emacs 22 Only
;(set-face-background 'hl-line "light yellow") ;; Emacs 22 Only
;(set-face-background 'highlight "#CCCCCC")  ;; Emacs 21 Only
;

;;tab space
(setq default-tab-width 4)

;;
(global-auto-revert-mode 1)

;;
(setq tramp-default-method "ssh")
(require 'tramp)

;;;Clearing Shell Mode Output
;;http://www.emacswiki.org/emacs/ShellMode#toc11
(defun clear-shell ()
   (interactive)
   (let ((old-max comint-buffer-maximum-size))
     (setq comint-buffer-maximum-size 0)
     (comint-truncate-buffer)
     (setq comint-buffer-maximum-size old-max))) 


;;; clojure-mode with emacs
;;; http://www.assembla.com/wiki/show/clojure/Getting_Started_with_Emacs
;;; Run the command M-x package-list-packages.
;;; Select clojure-mode (press i), and then install the selected package (press x).
;;; # M-x describe-variable inferior-lisp-program
;;; Customize the variable to point to a command that launches a Clojure REPL. You can use an absolute path, or a relative path that will be interpreted relative to the current directory in emacs


;;COMMON LISP
;;http://www.franz.com/emacs/
; Emacs-Lisp interface.  
;(push "~/Applications/AllegroCL/eli" load-path)
;(load "fi-site-init.el")
;
;(setq fi:common-lisp-image-name "~/Applications/AllegroCL/alisp.exe") 
;(setq fi:common-lisp-image-file "~/Applications/AllegroCL/alisp.dxl") 
;(setq fi:common-lisp-directory "~/Applications/AllegroCL") 
;;END OF COMMON LISP SETTING

;;SLIME
;;http://www.franz.com/emacs/slime.lhtml
;; update this path to the correct location.
;(add-to-list 'load-path "~/Applications/slime")
;(require 'slime-autoloads)

;(eval-after-load "slime"
;  '(progn
;    (add-to-list 'load-path "~/Applications/slime/contrib")
;    (slime-setup '(slime-fancy slime-banner))
;    (setq slime-complete-symbol*-fancy t)
;    (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)))

;; Optionally, specify the Lisp program you are using. Default is "lisp"
;; If the Allegro directory is not in your PATH environment variable
;; this should be a fully qualified path.
;; choose one of the below based on Express or non-Express usage
(setq inferior-lisp-program "~/Applications/AllegroCL/alisp") 
;;(setq inferior-lisp-program "allegro-express") 

;;;; python development
;;;; http://jesselegg.com/archives/2010/02/25/emacs-python-programmers-part-1/
;;; Electric Pairs
(add-hook 'python-mode-hook
     (lambda ()
      (define-key python-mode-map "\"" 'electric-pair)
      (define-key python-mode-map "\'" 'electric-pair)
      (define-key python-mode-map "(" 'electric-pair)
      (define-key python-mode-map "[" 'electric-pair)
      (define-key python-mode-map "{" 'electric-pair)))
(defun electric-pair ()
  "Insert character pair without sournding spaces"
  (interactive)
  (let (parens-require-spaces)
    (insert-pair)))

;;; bind RET to py-newline-and-indent
(add-hook 'python-mode-hook '(lambda () 
     (define-key python-mode-map "\C-m" 'newline-and-indent)))

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(setq-default py-indent-offset 4)


;;;javascript mode
;;;http://www.brgeight.se/downloads/emacs/javascript.el
;;;http://www.emacswiki.org/emacs/JavaScriptMode
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(autoload 'javascript-mode "javascript" nil t)
;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(gud-gdb-command-name "gdb --annotate=1")
 '(inferior-lisp-program "java -cp /Users/seungjin/Applications/clojure-1.1.0/lib/clojure.jar clojure.main")
 '(large-file-warning-threshold nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )





(require 'tramp)
(setq tramp-default-method "ssh")



;; http://github.com/defunkt/gist.el
(add-to-list 'load-path "~/.emacs.d/vendor/gist.el")
(require 'gist)

;; ModeCompile
;; http://www.emacswiki.org/emacs/ModeCompile
; Install mode-compile to give friendlier compiling support!
(autoload 'mode-compile "mode-compile"
   "Command to compile current buffer file based on the major mode" t)
(global-set-key "\C-cc" 'mode-compile)
(autoload 'mode-compile-kill "mode-compile"
 "Command to kill a compilation launched by `mode-compile'" t)
(global-set-key "\C-ck" 'mode-compile-kill)


