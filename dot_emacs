

;;; emacs version 23.2 on mac

;;;
;;; Reload your ~/.emacs file or restart Emacs
;;; Invoke M-x package-refresh-content
;;;


(setq inhibit-startup-message t)

;;
;; http://tromey.com/elpa/install.html
;; Emacs Lisp Package Archive
;; Run the command M-x package-list-packages.

(setq load-path (append '("~/.emacs.d") load-path))

;;no menu bar
(menu-bar-mode 0)

;;I always run a shell in Emacs. Always always.
;;(shell)

;; 
(auto-revert-mode 1)

;;'side line number'
(require 'linum)
(global-linum-mode)

(setq line-number-mode t) 
(setq column-number-mode t)

;;highlight line numbercolor-theme-6.6.0
;;(hl-line-mode 1)
;;(global-hl-line-mode 1)
;;(set-face-background 'hl-line "#CCCCCC")  ;; Emacs 22 Only
;(set-face-background 'hl-line "light yellow") ;; Emacs 22 Only
;(set-face-background 'highlight "#CCCCCC")  ;; Emacs 21 Only
;

;;tab space
;;I like tab space = 2. 
(setq default-tab-width 2)

(setq-default indent-tabs-mode nil)    ; use only spaces and no tabs
(setq default-tab-width 2)

;;
(global-auto-revert-mode 1)

(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-l") 'windmove-right)   

;;
(setq tramp-default-method "ssh")
(require 'tramp)

(load "~/.emacs.d/seungjin/clear-shell.el")
(load "~/.emacs.d/seungjin/insert-current-date-time.el")

;; http://dev.clojure.org/display/doc/Getting+Started+with+Emacs

;(add-to-list 'load-path "~/.emacs.d/elpa")
;(require 'package)
;(add-to-list 'package-archives
;	     '("marmalade" . "http://marmalade-repo.org/packages/"))
;(package-initialize)

(load "~/.emacs.d/clojure-mode/clojure-mode.el")

;; (require 'paredit) if you didn't install via package.el
(defun turn-on-paredit () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'turn-on-paredit)

;; my lein path
(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))

(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-charcoal-black)))

;;http://www.emacswiki.org/CuaMode 
;(cua-mode t)
;(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;(transient-mark-mode 1) ;; No region when it is not highlighted
;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
;;If you like the rectangle support, global mark mode, and other features, but prefer the standard Emacs keys, add: 
(cua-selection-mode t)
;;in cua mode, colume edition is Ctrl+Ret




(if (string-equal system-type "darwin")
  (progn
    (set-default-font "-apple-Inconsolata-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
    )  
)

(if (not(eq window-system 'nil))
  (scroll-bar-mode 0)
)


;; utf-8 setting
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

;; split window at initial time
(split-window-vertically)
(other-window 1)
;;(shrink-window 10)
;;(let ((window-size-fixed nil))
;; (enlarge-window 10))
   (shell)
(linum-mode 0)
(other-window 1)



;;;
;;;
;;;http://www.emacswiki.org/emacs/ProgrammingWithPythonModeDotEl
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
;;; use C-c ! to start ipython instead of python: http://ipython.scipy.org
;;; need to install ipython (easy_install)

(add-hook 'python-mode-hook
  (lambda ()
    (set (make-variable-buffer-local 'beginning-of-defun-function)
          'py-beginning-of-def-or-class)
    (setq outline-regexp "def\\|class ")))


;;;
;; only spaces, no tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default python-indent 2)
(setq-default py-indent-offset 2)

;; python hook
(add-hook 'python-mode-hook
  (function (lambda ()
              (setq indent-tabs-mode nil
                    tab-width 2))))

(setq cua-auto-tabify-rectangles nil)


(defun new-shell ()
  "start a new instance of shell;
  if buffer \"*shell*\" already exists, rename it and start a new instance.
  The older shell will be marked \"\", counter-intuitively...."
  (interactive)
  (setq shell-name "*shell*")
  (if (get-buffer shell-name)
    (progn
      (switch-to-buffer shell-name)
      (rename-buffer (generate-new-buffer-name shell-name))))
  (shell))

(global-auto-revert-mode t)

;; I don't want to do text wrap
;;(setq-default truncate-lines t)
(setq-default truncate-lines 0)









